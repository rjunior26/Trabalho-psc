package com.mycompany.principal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

public class Principal {
    private static List<Pessoa> pessoas = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int opcao;
        do {
            exibirMenu();
            opcao = obterOpcao();
            processarOpcao(opcao);
        } while (opcao != 5);
    }

    private static void exibirMenu() {
        System.out.println("Menu:");
        System.out.println("1. Inserir");
        System.out.println("2. Alterar");
        System.out.println("3. Remover");
        System.out.println("4. Listar");
        System.out.println("5. Sair");
        System.out.print("Escolha uma opção: ");
    }

    private static int obterOpcao() {
        int opcao = 0;
        try {
            opcao = scanner.nextInt();
        } catch (Exception e) {
            System.out.println("Erro ao ler a opção. Por favor, insira um número válido.");
            scanner.nextLine(); // limpar o buffer do scanner
        }
        return opcao;
    }

    private static void processarOpcao(int opcao) {
        switch (opcao) {
            case 1:
                inserir();
                break;
            case 2:
                alterar();
                break;
            case 3:
                remover();
                break;
            case 4:
                listar();
                break;
            case 5:
                System.out.println("Saindo...");
                break;
            default:
                System.out.println("Opção inválida.");
        }
    }

    private static void inserir() {
        System.out.println("1. Inserir Paciente");
        System.out.println("2. Inserir Médico");
        int tipo = scanner.nextInt();
        scanner.nextLine(); // limpar o buffer do scanner

        System.out.print("Nome: ");
        String nome = scanner.nextLine();
        System.out.print("CPF: ");
        String cpf = scanner.nextLine();

        if (tipo == 1) {
            System.out.print("Idade: ");
            int idade = scanner.nextInt();
            scanner.nextLine(); // limpar o buffer do scanner
            Paciente paciente = new Paciente(nome, cpf, idade);
            pessoas.add(paciente);
        } else if (tipo == 2) {
            System.out.print("Especialidade: ");
            String especialidade = scanner.nextLine();
            Medico medico = new Medico(nome, cpf, especialidade);
            pessoas.add(medico);
        } else {
            System.out.println("Opção inválida.");
        }
    }

    private static void alterar() {
        System.out.print("Digite o CPF da pessoa a ser alterada: ");
        String cpf = scanner.nextLine();
        
        Iterator<Pessoa> iterator = pessoas.iterator();
        while (iterator.hasNext()) {
            Pessoa pessoa = iterator.next();
            if (pessoa.getCpf().equals(cpf)) {
                System.out.print("Novo nome: ");
                String nome = scanner.nextLine();
                pessoa.setNome(nome);

                if (pessoa instanceof Paciente) {
                    System.out.print("Nova idade: ");
                    int idade = scanner.nextInt();
                    scanner.nextLine(); // limpar o buffer do scanner
                    ((Paciente) pessoa).setIdade(idade);
                } else if (pessoa instanceof Medico) {
                    System.out.print("Nova especialidade: ");
                    String especialidade = scanner.nextLine();
                    ((Medico) pessoa).setEspecialidade(especialidade);
                }
                return;
            }
        }
        System.out.println("Pessoa não encontrada.");
    }

    private static void remover() {
        System.out.print("Digite o CPF da pessoa a ser removida: ");
        String cpf = scanner.nextLine();

        Iterator<Pessoa> iterator = pessoas.iterator();
        while (iterator.hasNext()) {
            Pessoa pessoa = iterator.next();
            if (pessoa.getCpf().equals(cpf)) {
                iterator.remove(); // remover usando iterator para evitar ConcurrentModificationException
                System.out.println("Pessoa removida com sucesso.");
                return;
            }
        }
        System.out.println("Pessoa não encontrada.");
    }

    private static void listar() {
        if (pessoas.isEmpty()) {
            System.out.println("Nenhuma pessoa cadastrada.");
        } else {
            for (Pessoa pessoa : pessoas) {
                System.out.println(pessoa);
            }
        }
    }
}
